1) To generate a users controller for the api.

CODE: rails generate controller api::v1::users


2) To see all the routes(wrt a particular controller) and there uri format.

CODE: rails routes | grep users

This shows that we now have a path to our resources and can use the GET function.

3) HTTP CODE RESPONSES AND THEIR EQUIVALENT IN rails:
:success -> 200

:created -> 201 (the demand was met and resulted in the creation of a new resource after the POST requests.)

:unproccessable_entity -> 422 (the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions.)

:no_content -> 204 (a request has succeeded, but that the client doesn't need to navigate away from its current page. Used for PUT/DELETE)

4) PUT AND PATCH
PUT is used when we want to modify all the parameters of a resource.
PATCH is used to update some portion of the existing resource.

5) Test GET function
Step 1: Create 3 users in the users table
Step 2: Open console and run rails server
Step 3: Open another console and test the endpoint using these cURL commands.

curl http://127.0.0.1:3000/api/v1/users/1
curl http://127.0.0.1:3000/api/v1/users/2
curl http://127.0.0.1:3000/api/v1/users/3
curl http://127.0.0.1:3000/api/v1/users/4

6) Test POST function
Step 1: Open console and run rails server
Step 2: Open another console and test the endpoint using these cURL commands.
Step 3: Run User.all to see if new record added or not 

curl --request POST -d 'user[email]=sau@gmail.com' -d 'user[password]=foobar' localhost:3000/api/v1/users

curl --request POST -d 'user[email]=saugmail.com' -d 'user[password]=foobar' localhost:3000/api/v1/users

Now enter invalid or taken emails and see the responses too

7) Test PUT/PATCH function
Step 1: Open console and run rails server
Step 2: Open another console and test the endpoint using these cURL commands.

Shoot a PUT request
curl --request PUT -d 'user[email]=newmail@gmail.com' -d 'user[password]=12345' localhost:3000/api/v1/users/1

Check if updated or not(Shoot a GET request)
curl http://127.0.0.1:3000/api/v1/users/1

Shoot a PATCH request
curl --request PATCH -d 'user[email]=hey@gmail.com' localhost:3000/api/v1/users/1

Check if updated or not(Shoot a GET request)
curl http://127.0.0.1:3000/api/v1/users/1

7) Test DELETE function
Step 1: Open console and run rails server
Step 2: Open another console and test the endpoint using these cURL commands.

curl --request DELETE http://127.0.0.1:3000/api/v1/users/4

Step 3: Run User.all to see if record deleted or not 

8) Authentication
When it comes to authentication tokens, the JSON Web Token (JWT) is the standard. JWT is an open standard that allows the secure exchange of tokens between several parties.

JWT GEM interface:
token = JWT.encode({message: 'Hello World'},'my_secret_key')
JWT.decode(token, 'my_secret_key')

The JsonWebToken class
This class will encode and decode the JWT tokens.

Token’s Controller
Set up the route that will be used by the application to create the tokens. The actions we will implement will be managed as RESTful services. The connection will be managed by a POST request to the create action.

rails generate controller api::v1::tokens create

We only need the POST request for the tokens controller as we will not need to view, edit, or delete the tokens.

9) LOGIC to create JWT Token
The
 user receives a token if they send a valid email/password pair.
Otherwise, the server responds with a forbidden response. 

1. We always filter parameters with the method user_params.
2. We retrieve the user with the method User.find_by_emailwhich is a “magic” method of Active Record since the field email is present in the database).
3. We use the method User#authenticate—which exists thanks to the gem bcrypt—with the password as a parameter. The bcrypt gem will hash the password and check if it matches the attribute password_digest. The function returns true if everything went well, and returns false if not.
4. A JSON containing the token generated with the class JsonWebToken is returned if the password corresponds to the hash. Otherwise, an empty response is returned with an unauthorized header.

10) Find the logged user.
the API returns the authentication token to the client if credentials are correct.
implement how to find the corresponding user of the authentication token given in the HTTP header. We’ll need to do so each time this client requests an entry point that requires permission.
We will use the HTTP header Authorization for this purpose

CREATE a current_user method to meet our needs. It will find the user associated with the authentication token sent with each request. 

We get the token from the header Authorization and look for the corresponding user. Nothing complicated.

For authentication tests
Struct that mimics the behaviour of a Rails request by using a headers attribute of the type Hash

11) Authentication with the Token
Limit the users' access to their own profiles so the users can only change their own profiles.

Authorization plays a vital role in constructing applications because it helps define what the user can do. We have a route to update the user, but there is a problem; anyone can update any user.

FOCUS:
Implement a method that will require the user to be logged in to prevent unauthorized access.

Ensure that the user who is logged in will only be able to update their own data and delete their own account.

Logs in the user.
headers: { Authorization: JsonWebToken.encode(user_id: @user.id) }

12) Generating the Product Model
These are the items that the user will sell in the application and will be directly linked to it.

Associate the User model with the Product model using the has_many and belongs_to.

We will first create a Product model. Then we’ll add some validations and, finally, associate it with the User model.

REMEMBER:
Ideally, a user’s products should be deleted along with the user.


TRY CREATING A Product
Product.create! title: 'abcd', user_id: '1', price: '1'

13) Product's Endpoints
We will build five REST actions, show, list, create, update, and destroy.

The show function will return the information of the product identified by the id.

List Products
Add a function that will list the products for the user.

CREATE Products 
Assign the created product to the user who owns the JWT token provided in the HTTP header Authorization.

Prevent unauthorized access to update product details

14) Presentation of JSON output
An essential and challenging part of creating our API is deciding the output format. Fortunately, some conventions already exist. Indeed, most the common come from JSON:API.

gem 'jsonapi-serializer'

The JSON:API Serializer uses the serializer class of Ruby. Serializers are Ruby classes responsible for converting a model into a Hash or a JSON.

To serialize the User:
rails generate serializer User email

This serializer will convert our User object to JSON, which implements all JSON:API specifications. Since we specified email as attributes, we will retrieve it in the data array.

Then use these two commands to see the information of the first user with and without the use of the serializer, respectively:

>> User.first
>> UserSerializer.new( User.first ).serializable_hash
The serialized output is much more optimized.

15) Serialize the Product model to get the desired JSON output.

Then use these two commands to see the information of the first user with and without the serializer, respectively:

>> Product.first
>> ProductSerializer.new( Product.first ).serializable_hash

16)  Display user attributes in the output for product request.

Use include.
We will include all the objects’ relationships in an included key. Each object will also include a relationship key that defines the relationship and must be found in the included key.

TO SEE a PRETTY JSON OUTPUT 

step 1: Install jq command line tool
sudo apt install jq

Step 2: curl http://127.0.0.1:3000/api/v1/products/1 >> sample.json

Step 3: jq . sample.json

17) Incorporate relationships to display the corresponding products in the JSON output of a user.

Step 1: Empty the contents of sample.json: echo > sample.json
Step 2: curl http://127.0.0.1:3000/api/v1/users/6 >> sample.json

Step 3: jq . sample.json